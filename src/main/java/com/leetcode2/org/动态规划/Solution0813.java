package com.leetcode2.org.动态规划;

import java.util.Arrays;
import java.util.Comparator;

public class Solution0813 {
    public int pileBox(int[][] box) {

        Arrays.sort(box, new Comparator<int[]>() {
            public int compare(int[] o1, int[] o2) {
                if (o1[0] != o2[0]) {
                    return o1[0] - o2[0];
                } else {
                    if (o1[1] != o2[1]) {
                        return o1[1] - o2[1];
                    } else {
                        return o1[2] - o2[2];
                    }

                }
            }
        });
        int n = box.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = box[i][2];
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (box[i][0] < box[j][0] && box[i][1] < box[j][1] && box[i][2] < box[j][2]) {
                    dp[j] = Math.max(dp[j], dp[i] + box[j][2]);
                }
            }
        }
        return Arrays.stream(dp).max().getAsInt();
    }

    public static void main(String[] args) {
//        int[][] box = {{1, 1, 1}, {2, 3, 4}, {2, 6, 7}, {3, 4, 5}};
//        int[][] box = {
//                {3, 1, 4}, {10, 16, 15}, {9, 10, 20}, {8, 9, 8}, {19, 7, 8}, {10, 8, 2},
//                {18, 16, 6}, {8, 4, 9}, {13, 1, 10}, {18, 4, 6}, {14, 8, 16}, {13, 18, 2},
//                {17, 10, 16}, {4, 6, 6}, {11, 17, 7}, {1, 8, 7}, {16, 10, 15}, {18, 18, 4},
//                {7, 2, 12}, {1, 7, 3}, {8, 5, 4}, {15, 4, 9}, {16, 7, 6}, {12, 13, 20},
//                {2, 4, 3}, {12, 13, 20}, {1, 2, 13}, {16, 20, 11}, {14, 4, 17}, {16, 15, 8},
//                {15, 18, 17}, {4, 4, 8}, {5, 18, 1}, {16, 10, 10}, {17, 19, 13}, {18, 20, 13},
//                {17, 5, 19}, {5, 2, 17}, {7, 13, 13}, {9, 11, 12}, {11, 10, 12}, {10, 16, 5},
//                {4, 3, 18}, {18, 11, 18}, {14, 14, 16}, {18, 1, 14}, {7, 5, 19}, {10, 15, 11},
//                {2, 11, 8}, {6, 8, 17}, {12, 1, 12}, {8, 4, 17}, {13, 14, 11}, {17, 20, 11},
//                {15, 10, 15}, {7, 6, 19}, {14, 13, 15}, {11, 9, 12}, {19, 14, 2}, {14, 11, 8},
//                {4, 2, 18}, {12, 20, 15}, {2, 12, 18}, {16, 6, 9}
//        };
        int[][] box = {
                {10, 9, 8}, {7, 9, 7}, {9, 7, 9}, {9, 7, 9}, {7, 7, 10}, {7, 9, 10},
                {7, 8, 10}, {10, 8, 8}, {8, 9, 7}, {7, 9, 10}, {10, 10, 8}, {7, 8, 8},
                {9, 9, 9}, {9, 8, 10}, {10, 10, 8}, {10, 9, 10}, {9, 8, 8}, {10, 9, 8},
                {7, 8, 9}, {7, 9, 7}, {10, 10, 8}, {9, 7, 9}, {7, 9, 10}, {8, 8, 7},
                {7, 8, 7}, {7, 10, 9}, {9, 8, 7}, {9, 9, 7}, {10, 10, 7}, {7, 9, 10},
                {10, 10, 8}, {10, 7, 10}, {9, 7, 9}, {10, 9, 7}, {10, 7, 8}, {8, 10, 8},
                {10, 7, 9}, {8, 8, 7}, {10, 9, 10}, {9, 10, 10}, {10, 10, 9}, {8, 10, 8},
                {9, 7, 7}, {8, 7, 9}, {7, 10, 8}, {10, 10, 8}, {10, 10, 7}, {7, 10, 8},
                {7, 8, 10}, {10, 9, 9}, {9, 8, 9}, {9, 10, 10}, {7, 9, 10}
        };


        System.out.println(new Solution0813().pileBox(box));
    }

}
