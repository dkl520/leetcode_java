package com.leetcode2.org.动态规划;

public class Solution397_3 {
        /**
         * 给定一个正整数 n，你可以执行以下操作之一：
         * 如果 n 是偶数，则 n 除以 2
         * 如果 n 是奇数，则 n 可以变为 n + 1 或 n - 1
         * 目标是使 n 变为 1，请计算并返回最少的操作次数。
         *
         * @param _n 初始正整数
         * @return 使 n 变为 1 所需的最少操作次数
         */
        public int integerReplacement(int _n) {
            // 由于在循环中可能会将 n 变为负数（当 n 为奇数且执行 n-- 时），因此将其转换为 long 类型以避免溢出
            long n = _n;
            int ans = 0; // 用于记录操作次数

            // 当 n 不等于 1 时，继续执行循环
            while (n != 1) {
                if (n % 2 == 0) {
                    // 如果 n 是偶数，则执行 n 除以 2 的操作
                    n >>= 1; // 相当于 n = n / 2，但使用位运算更高效
                } else {
                    // 如果 n 是奇数，则需要进行判断以决定是执行 n+1 还是 n-1
                    // 当 n 不等于 3 且 n 除以 2 的结果仍为奇数时，选择 n+1 可以更快接近 1
                    // 这是因为 n 变为偶数后，可以连续除以 2，减少操作次数
                    // 否则，直接执行 n-1
                    if (n != 3 && ((n >> 1) & 1) == 1) {
                        n++;
                    } else {
                        n--;
                    }
                }
                // 每次操作后，操作次数加 1
                ans++;
            }
            // 循环结束时，n 已经变为 1，返回操作次数
            return ans;
        }
}
